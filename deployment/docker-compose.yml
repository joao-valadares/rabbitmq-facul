# filepath: c:\Users\joaog\Documents\Projetos Pessoais\rabbitmq-facul\deployment\docker-compose.yml
version: '3.8'

services:
  # RabbitMQ Server
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-server
    hostname: rabbitmq-host
    restart: unless-stopped
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.8
      RABBITMQ_DISK_FREE_LIMIT: 2GB
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - rabbitmq-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python Producer
  python-producer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
    container_name: python-producer
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
      SCENARIO_TYPE: ${SCENARIO_TYPE:-direct_exchange}
    volumes:
      - ../:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: python ${SCENARIO_TYPE:-direct_exchange}/producer.py

  # Python Consumer 1
  python-consumer1:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
    container_name: python-consumer1
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
      SCENARIO_TYPE: ${SCENARIO_TYPE:-direct_exchange}
    volumes:
      - ../:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: python ${SCENARIO_TYPE:-direct_exchange}/consumer1.py

  # Python Consumer 2
  python-consumer2:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
    container_name: python-consumer2
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
      SCENARIO_TYPE: ${SCENARIO_TYPE:-direct_exchange}
    volumes:
      - ../:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: python ${SCENARIO_TYPE:-direct_exchange}/consumer2.py

  # Python Consumer 3
  python-consumer3:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.python
    container_name: python-consumer3
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
      SCENARIO_TYPE: ${SCENARIO_TYPE:-direct_exchange}
    volumes:
      - ../:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: python ${SCENARIO_TYPE:-direct_exchange}/consumer3.py

  # Node.js Consumer (para interoperabilidade)
  nodejs-consumer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.nodejs
    container_name: nodejs-consumer
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
    volumes:
      - ../interoperability:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: node consumer2.js
    profiles:
      - interop
  # JavaScript Consumer (para interoperabilidade)
  javascript-consumer:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.nodejs
    container_name: javascript-consumer
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASS: admin123
      LOG_LEVEL: INFO
    volumes:
      - ../interoperability:/app
      - ./logs:/app/logs
    networks:
      - rabbitmq-network
    command: node consumer3.js
    profiles:
      - interop

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rabbitmq-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - rabbitmq-network
    profiles:
      - monitoring

  # Log Aggregation - ELK Stack (opcional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - rabbitmq-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - rabbitmq-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - rabbitmq-network
    profiles:
      - logging

volumes:
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  rabbitmq-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
